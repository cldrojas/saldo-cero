---
import { actions } from 'astro:actions'
import RoundProgressBar from './RoundProgressBar.astro'
import { AccountCard } from './AccountData'

const { data: accounts, error: accountsError } = await Astro.callAction(
  actions.accounts.getAll,
  ''
)
if (!accounts || accountsError) {
  console.error(accountsError)
}
console.log(`[Overview]:accounts fetched:`, accounts)
const actionResult = Astro.getActionResult(actions.accounts.selectAccount)
if (!actionResult) console.error('weaaa')
const selectedAccount = actionResult || accounts?.at(0)
console.info(`[Overview]:selectedAccount:`, actionResult)

const { asBar = false } = Astro.props
---

<main class={asBar ? 'px-1' : 'border border-gray-700 rounded-lg w-full my-2 p-4'}>
  <div
    class={asBar
      ? 'flex items-center text-xs justify-between p-2 rounded-lg'
      : 'flex flex-col gap-4 relative'}
  >
    <div class={asBar ? ' flex' : 'flex items-start justify-between'}>
      <label
        for="account-selector"
        class="text-sm text-slate-400 bg-primary"
        >Selected Account</label
      >
      <select
        id="account-selector"
        name="account-selector"
        class="bg-gray-800 text-gray-400 border border-gray-700 rounded-md px-2 text-xs
          flex text-center cursor-pointer outline-none"
      >
        {
          accounts?.map((account) => (
            <option
              value={account.id}
              selected={selectedAccount?.id === account.id}
            >
              {account.name}
            </option>
          ))
        }
      </select>
    </div>
    {
      !asBar && (
        <RoundProgressBar
          class="mt-4"
          max={selectedAccount?.balance || 100}
          current={selectedAccount?.remaining || 50}
          size="220"
          strokeWidth="15"
          label="Remaining Today"
        />
      )
    }
    <!-- section: ammounts -->
    <div
      class={`flex justify-between ${
        asBar ? 'items-center gap-4 text-gray-500' : 'items-end-safe text-gray-400'
      }`}
    >
      <h3>Total: {selectedAccount?.balance}</h3>
    </div>
  </div>

  {selectedAccount !== undefined && <AccountCard account={selectedAccount} />}
</main>

<script>
  import { actions } from 'astro:actions'

  const $accountSelector = document.querySelector('select')
  $accountSelector?.addEventListener('change', async (e: any) => {
    // Show alert pop-up with greeting from action
    const { data, error } = await actions.accounts.selectAccount({
      accountId: e.target.value
    })
    // if (!error) alert(JSON.stringify(data))
    console.log(`script:selectAccount result:`, data)
  })
</script>
