---
import Options from '@assets/options.svg'
import { movementColor } from '@utils/index'
import { actions } from 'astro:actions'
import type { Movement } from 'src/env'

const { data: movements, error } = await Astro.callAction(actions.getMovements, {})
if (!movements && error) {
  console.error('Error fetching balance:', error)
  throw new Error('Failed to fetch balance')
}
const { qtty } = Astro.props
const visibleMovements = (typeof qtty === 'number' && qtty > 0)
  ? movements.slice(0, qtty)
  : movements
---

<div class="flex flex-col max-h-82 overflow-y-auto">
  
  <ul class="space-y-2 px-2">
    {
      visibleMovements.map((movement: Movement) => (
        <li
          class="flex items-center justify-between px-3 py-1 bg-gray-800 rounded-lg"
          id={`movement-${movement.id}`}
        >
          <div class=" border-amber-400">
            <h3 class="text-md font-semibold">{movement.description}</h3>
            <p class="text-xs text-gray-400">
              {movement.date.toLocaleDateString('en-es', {
                dateStyle: 'medium'
              })}
              - {movement.accounts?.map((movement) => movement).join(', ')}
            </p>
          </div>
          <div class=" border-blue-500 flex items-center">
            <span class={movementColor(movement.type)}>${Math.abs(movement.amount)}</span>
            <button
              class="text-gray-400 hover:text-white hover:cursor-pointer font-semibold p-1"
              onclick="menu.open(event)"
            >
              <Options
                width={24}
                height={24}
              />
            </button>
          </div>
        </li>
      ))
    }
  </ul>
</div>
