---
import { movementColor } from '@utils/index'
import { actions } from 'astro:actions'
import type { Movement } from 'src/env'
import VerticalEllipsisButton from './VerticalEllipsisButton.astro'

const { data: movements, error } = await Astro.callAction(actions.movements.getAll, {})
if (!movements && error) {
  console.error('Error fetching balance:', error)
  throw new Error('Failed to fetch balance')
}
const { limit } = Astro.props
const visibleMovements =
  typeof limit === 'number' && limit > 0
    ? movements.slice(-limit).toReversed()
    : movements
const getAccounts = (movement: Movement) => {
  if (!movement.from) return ''
  if (movement.type === 'transfer') {
    return `${movement.from} â†’ ${movement.to || ''}`.trim()
  }
  return movement.from || ''
}
---

<div class="flex flex-col max-h-82 overflow-y-auto">
  <ul class="space-y-2 px-2">
    {
      visibleMovements.map((movement: Movement) => (
        <li
          class="flex items-center justify-between px-3 py-1 bg-gray-800 rounded-lg"
          id={`movement-${movement.id}`}
        >
          <a
            href={`/movements/${movement.id}`}
            class="w-full"
          >
            <div class=" border-amber-400">
              <h3 class="text-md font-semibold">{movement.description}</h3>
              <p class="text-xs text-gray-400">
                {movement.date.toLocaleDateString('en-es', {
                  dateStyle: 'medium'
                })}
                - {getAccounts(movement)}
              </p>
            </div>
          </a>
          <div class=" border-blue-500 flex items-center">
            <span class={movementColor(movement.type)}>${Math.abs(movement.amount)}</span>
            <VerticalEllipsisButton
              id={movement.id}
              server:defer
            />
          </div>
        </li>
      ))
    }
  </ul>
</div>
