---
import { actions } from 'astro:actions'
const { data: accounts, error } = await Astro.callAction(actions.accounts.getAll, '')
if (!accounts || error) {
  console.error('Error fetching accounts:', error)
  throw new Error('Failed to fetch accounts')
}
const result = Astro.getActionResult(actions.movements.create)
if (result && !result.error) {
  console.log(`DEBUG:result after adding a new movement:`, result)
}
---

<dialog
  id="movements-modal"
  class="bg-gray-900/5 w-full h-full fixed top-5 left-0 justify-items-center backdrop-blur-xs animate-fade-in"
>
  <form
    action={actions.movements.create}
    method="post"
    class="flex flex-col space-y-2 bg-slate-800/90 text-gray-300 border border-gray-600 rounded-lg w-full max-w-lg p-6 shadow-lg"
  >
    <header class="text-center">
      <h2 class="text-xl font-semibold mb-4">Add Movement</h2>
      <p class="text-sm">Register a new movement to your budget</p>
    </header>
    <label for="amount"> Amount </label>
    <input
      type="number"
      name="amount"
      id="amount"
      autofocus
      required
    />
    <label for="description"> Description </label>
    <input
      type="text"
      id="description"
      name="description"
      required
    />
    <label for="type">Type </label>
    <select
      id="type"
      name="type"
      required
    >
      <option value="income">Income</option>
      <option value="expense">Expense</option>
      <option value="transfer">Transfer</option>
    </select>
    <label for="date">Date </label>

    <span class="datepicker-toggle">
      <span class="datepicker-toggle-button"></span>
      <input
        type="date"
        name="date"
        id="date"
        class="datepicker-input"
        max={new Date().toISOString().split('T')[0]}
        value={new Date().toISOString().split('T')[0]}
      />
    </span>

    <label for="from"> Account </label>
    <select
      id="from"
      name="from"
      required
    >
      {accounts.map((account) => <option value={account.id}>{account.name}</option>)}
    </select>
    {
      // should only show if the type is transfer
    }
    <footer class="flex justify-around items-center mt-4 gap-4">
      <button
        type="button"
        commandfor="movements-modal"
        command="close"
        class="px-4 py-2 bg-slate-700/90 rounded w-full hover:bg-slate-700 cursor-pointer"
      >
        Cancel
      </button>
      <button
        type="submit"
        class="px-4 py-2 bg-blue-600/85 rounded w-full hover:bg-blue-600 cursor-pointer"
      >
        Add Movement
      </button>
    </footer>
  </form>
</dialog>

<style>
  input,
  select {
    width: 100%;
    height: 36px;
    padding: 4px 12px;
    background: #1e2939;
    border-radius: 6px;
    outline: none;
    border: solid 1px #374151;
    appearance: base-select;
  }
  /* input[type='date']::-webkit-calendar-picker-indicator {
    display: none;
    border: solid 1px red;
    width: 100% !important;
  } */
  input:focus,
  select:focus {
    border: solid 1px #3b82f6;
  }
  label {
    margin: 0;
  }
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .datepicker-toggle {
    display: inline-block;
    position: relative;

    border: solid 1px #374151;
    width: 100%;
    border-radius: 6px;
    height: 37px;
  }
  .datepicker-toggle-button {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
  }

  .datepicker-input {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
    box-sizing: border-box;
  }
  .datepicker-input::-webkit-calendar-picker-indicator {
    position: absolute;
    opacity: 0;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    cursor: pointer;
  }
</style>
